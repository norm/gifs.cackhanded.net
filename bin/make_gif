#!/bin/bash

set -eu

export AV_LOG_FORCE_NOCOLOR=1

DEFAULT_WIDTH=480
DEFAULT_FPS=10
DEFAULT_COLOURS=64
DEBUG="${GIF_DEBUG:-}"


function main {
    local toml="$1"
    local gif="$2"
    local video="${3:-}"

    if [ -z "$video" ]; then
        file=$(toml $toml video.file)
        ext=$(toml $toml video.ext)
        video="videos/${file}.${ext}"
    fi

    if [ ! -f "$video" ]; then
        echo " ** $video does not exist"
        exit 1
    fi

    # main video timings
    timing_args=''
    start=$(toml $toml video.start)
    [ -n "$start" ] && timing_args="$timing_args -ss $start"
    duration=$(toml $toml video.duration)
    [ -n "$duration" ] && timing_args="$timing_args -t $duration"
    end=$(toml $toml video.end)
    [ -n "$end" ] && timing_args="$timing_args -to $end"

    # calculate the palette
    debug ffmpeg \
        -loglevel error \
        -y \
        ${timing_args} \
        -i "$video" \
        -filter_complex "$(palettegen_filter $toml)" \
        "${TEMP}/palette.png"

    # calculate the size
    local crop=$(get_crop $toml)
    local scale=$(get_scale $toml)
    size_filter="$(join ',' "$crop" "$scale")"
    debug ffmpeg \
        -loglevel error -y -ss 0 -t 0.01 -i "$video" \
        -filter_complex "[0:v] ${size_filter:-scale=w=in_w:h=in_h}" \
        ${TEMP}/size.gif
    output_width="$( file $TEMP/size.gif | awk '{ print $7 }')"
    output_height="$( file $TEMP/size.gif | awk '{ print $9 }')"
    echo "    ${output_width} x ${output_height}"

    # create captions
    num_captions="$(toml $toml caption --length)"
    caption_args=''
    caption_colours=''
    if [ "$num_captions" -gt 0 ]; then
        for index in $(seq 1 $num_captions); do
            caption_text="$(toml $toml caption.text $index)"
            caption_placement="$(toml $toml caption.placement $index)"
            caption_size="$(toml $toml caption.size $index)"
            caption_margin="$(toml $toml caption.margin $index)"
            caption_font="$(toml $toml caption.font $index)"
            caption_colour="$(toml $toml caption.colour $index)"
            caption_strokew="$(toml $toml caption.stroke_width $index)"
            caption_strokecol="$(toml $toml caption.stroke_colour $index)"
            caption_align="$(toml $toml caption.align $index)"
            caption \
                ${output_width:-$DEFAULT_WIDTH} \
                $output_height \
                --colour "${caption_colour:-#ffffff}" \
                --font "${caption_font:-assistant-semibold.ttf}" \
                --font-size "${caption_size:-40}" \
                --margin "${caption_margin:-10}" \
                --stroke-width "${caption_strokew:-2}" \
                --stroke-colour "${caption_strokecol:-#000000}" \
                --text-align "${caption_align:-left}" \
                --placement ${caption_placement:-bl} \
                "${caption_text}" \
                "${TEMP}/caption-${index}.png"

            caption_colours+=" ${caption_colour:-#ffffff}"
            caption_colours+=" ${caption_strokecol:-#000000}"

            caption_args+=" -i ${TEMP}/caption-${index}.png"
        done
    fi

    edit-palette "${TEMP}/palette.png" $caption_colours

    filter_debug "$(generate_filter $toml)"
    debug ffmpeg \
        -loglevel error \
        -y \
        ${timing_args} \
        -i "$video" \
        -i "${TEMP}/palette.png" \
        ${caption_args} \
        -f gif \
        -filter_complex "$(generate_filter $toml)" \
        "${TEMP}/output.gif"

    uncompressed_size="$(filesize "${TEMP}/output.gif")"
    output_max_size="$(convert_mb $(toml $toml output.max_size))"
    echo -n "    size $uncompressed_size"
    [ -n "$output_max_size" ] && echo -n ", max_size $output_max_size"
    echo ''

    output_loss="$(toml $toml output.loss)"
    losses="${output_loss:-0}"
    gifsicle \
        -O3 \
        --lossy=$losses \
        --no-extensions \
        -o "${TEMP}/gifsicle.${losses}.gif" \
        "$TEMP/output.gif"

    size="$(filesize "${TEMP}/gifsicle.${losses}.gif")"
    printf "  < optimised with loss %d, now %d, %.01f%% of original\n" \
        $losses \
        $size \
        "$(echo 3k $size $uncompressed_size / 100 \* p | dc)"

    if [ -n "$output_max_size" ]; then
        until [ "$size" -lt "$output_max_size" ]; do
            let "losses = losses + 10"

            gifsicle \
                -O3 \
                --lossy=$losses \
                --no-extensions \
                -o "${TEMP}/gifsicle.${losses}.gif" \
                "$TEMP/output.gif"

            size="$(filesize "${TEMP}/gifsicle.${losses}.gif")"
            printf "  < optimised with loss %d, now %d, %.01f%% of max\n" \
                $losses \
                $size \
                "$(echo 3k $size $output_max_size / 100 \* p | dc)"
        done
    fi

    mv "$TEMP/gifsicle.${losses}.gif" "$gif"
}

function palettegen_filter {
    local toml="$1"

    local max_cols=$(get_colours $toml)
    local mode=$(get_stats_mode $toml)
    local palettegen="palettegen=${max_cols}:${mode}"
    local clips=$(get_clips $toml)

    if [ -n "$clips" ]; then
        echo "$clips [cv] $palettegen"
    else
        local crop=$(get_crop $toml)
        local scale=$(get_scale $toml)
        local fps=$(get_fps $toml)
        echo "[0:v] $(join ',' $fps $crop $scale $palettegen)"
    fi
}

function generate_filter {
    local toml="$1"

    local mode=$(get_stats_mode $toml)
    local dither=$(get_dither $toml)

    local paletteuse="[1:v] paletteuse=${dither}:diff_mode=rectangle"
    local clips=$(get_clips $toml)
    local captions=$(get_captions_filter $toml)

    if [ -n "$clips" ]; then
        echo "$clips [cv]${captions}${paletteuse}"
    else
        local crop=$(get_crop $toml)
        local scale=$(get_scale $toml)
        local fps=$(get_fps $toml)
        local alter="$(join ',' $fps $crop $scale)"
        alter="${alter:-scale=w=in_w:h=in_h}"
        echo "[0:v] $alter [iv]; [iv]${captions}${paletteuse}"
    fi
}

function get_crop {
    local toml="$1"

    local video_crop="$(toml $toml video.crop)"
    local crop=''
    [ -n "$video_crop" ] && crop="crop=${video_crop}"

    echo $crop
}

function get_fps {
    local toml="$1"

    local output_fps="$(toml $toml output.fps)"
    local fps="fps=${output_fps:-$DEFAULT_FPS}"
    [ "$output_fps" == 'original' ] && fps=''

    echo $fps
}

function get_scale {
    local toml="$1"

    local output_width="$(toml $toml output.width)"
    local scale="scale=${output_width:-$DEFAULT_WIDTH}:-1"
    [ "$output_width" == 'original' ] && scale=''

    echo $scale
}

function get_colours {
    local toml="$1"

    local output_colours="$(toml $toml output.colours)"

    echo max_colors=${output_colours:-$DEFAULT_COLOURS}
}

function get_dither {
    local toml="$1"

    local output_dither="$(toml $toml output.dither)"

    echo "dither=${output_dither:-bayer:bayer_scale=4}"
}

function get_clips {
    local toml="$1"

    local clips=''
    local num_clips="$(toml $toml clip --length)"
    if [ "$num_clips" -gt 0 ]; then
        local fps=$(get_fps $toml)
        local filters=''
        for index in $(seq 1 $num_clips); do
            local start="$(toml $toml clip.start $index)"
            local end="$(toml $toml clip.end $index)"
            local trim="trim=start=$(to_seconds $start)"
            trim+=":end=$(to_seconds $end)"

            local cmd="$(join ',' "$fps" "$trim" setpts=PTS-STARTPTS)"
            clips+="[0:v] $cmd [c$index]; "
            filters+="[c$index]"
        done

        local scale=$(get_scale $toml)
        local crop=$(get_crop $toml)
        local alter="$(join ',' "concat=n=$index:v=1" "$crop" "$scale")"
        clips+="$filters $alter [cv];"
    fi

    echo $clips
}

function get_captions_filter {
    local toml="$1"

    local captions=''
    local num_captions="$(toml $toml caption --length)"
    local input
    if [ "$num_captions" -gt 0 ]; then
        for index in $(seq 1 $num_captions); do
            let "input = index + 1"

            local caption_from="$(toml $toml caption.from $index)"
            local caption_to="$(toml $toml caption.to $index)"
            local position="(main_w-overlay_w):(main_h-overlay_h)"
            local timing="${caption_from:-0},${caption_to:-1000}"
            local overlay="overlay=${position}:enable='between(t,${timing})'"

            if [ $index = 1 ]; then
                captions+="[$input:v] ${overlay} [v$index];"
            else
                captions+=" [v$((index-1))][$input:v] ${overlay} [v$index];"
            fi
        done
        captions+=" [v$index]"
    fi

    echo $captions
}

function get_stats_mode {
    local toml="$1"

    local output_mode="$(toml $toml output.mode)"

    echo "stats_mode=${output_mode:-diff}"
}

function convert_mb {
    size="${1:-0}"

    case "$size" in
        *mb)
            echo "${size%%mb} 1024 1024 * * p" | dc | sed -e 's/\..*//'
            ;;
        0)
            echo ''
            ;;
        *)
            echo "$size"
            ;;
    esac
}

function debug {
    [ -n "$DEBUG" ] && echo "$@"
    "$@"
}

function filter_debug {
    if [ -n "$DEBUG" ]; then
        echo "$@" | sed -e 's/; */;/g' | tr ';' '\n'
    fi
}

function join {
    local IFS="$1";
    shift;
    echo "$*" | tr -s ',' | sed -e 's/^,//' -e 's/,$//'
}

function cleanup {
    rm -rf "$TEMP"
}

function filesize {
    perl -E 'say((stat($ARGV[0]))[7])' "$1"
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
    # being called directly (rather than via 'source' in a test)
    TEMP="$(mktemp -d /tmp/make_gif.XXXXX)"
    trap cleanup EXIT

    main "$@"
fi
