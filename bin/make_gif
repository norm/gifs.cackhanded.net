#!/bin/bash

set -eu

DEFAULT_WIDTH=480
DEFAULT_FPS=10


function main {
    local toml="$1"
    local gif="$2"
    local video="${3:-}"

    if [ -z "$video" ]; then
        file=$(toml $toml video.file)
        ext=$(toml $toml video.ext)
        video="videos/${file}.${ext}"
    fi

    if [ ! -f "$video" ]; then
        echo "** $video does not exist"
        exit 1
    fi

    start=$(toml $toml video.start)
    duration=$(toml $toml video.duration)

    # crop the image
    video_crop="$(toml $toml video.crop)"
    crop=''
    [ -n "$video_crop" ] \
        && crop="crop=${video_crop}"

    # resize the image, preserving the aspect ratio
    output_width="$(toml $toml output.width)"
    scale="scale=${output_width:-$DEFAULT_WIDTH}:-1"

    # reduce the framerate
    output_fps="$(toml $toml output.fps)"
    fps="fps=${output_fps:-$DEFAULT_FPS}"

    # reduce no. of colours in the uniform palette
    output_colours="$(toml $toml output.colours)"
    max_cols="max_colors=${output_colours:-64}"

    # dithering to improve output
    output_mode="$(toml $toml output.mode)"
    mode="stats_mode=${output_mode:-diff}"
    dither="dither=bayer:bayer_scale=4"
    diff_mode="diff_mode=rectangle"

    # captions
    ffmpeg_args=""
    input_filter=$(join ',' "$fps" "$crop" "$scale" "split")
    filter="[0:v] ${input_filter} [a][b];"
    num_captions="$(toml $toml caption --length)"
    if [ "$num_captions" -gt 0 ]; then
        # determine output size
        size_filter="$(join ',' "$crop" "$scale")"
        ffmpeg \
            -loglevel warning -y -ss 0 -t 0.01 -i "$video" \
            -filter_complex "[0:v] ${size_filter:-scale=w=in_w:h=in_h}" \
            size.gif
        output_width="$( file size.gif | awk '{ print $7 }')"
        output_height="$( file size.gif | awk '{ print $9 }')"

        for index in $(seq 1 $num_captions); do
            caption_text="$(toml $toml caption.text $index)"
            caption_placement="$(toml $toml caption.placement $index)"
            caption_size="$(toml $toml caption.size $index)"
            caption_margin="$(toml $toml caption.margin $index)"
            caption_font="$(toml $toml caption.font $index)"
            caption_colour="$(toml $toml caption.colour $index)"
            caption_strokew="$(toml $toml caption.stroke_width $index)"
            caption_strokecol="$(toml $toml caption.stroke_colour $index)"
            caption \
                ${output_width:-$DEFAULT_WIDTH} \
                $output_height \
                --colour "${caption_colour:-#ffffff}" \
                --font "${caption_font:-morlrounded-regular.otf}" \
                --font-size "${caption_size:-128}" \
                --margin "${caption_margin:-10}" \
                --stroke-width "${caption_strokew:-1}" \
                --stroke-colour "${caption_strokecol:-#000000}" \
                --placement ${caption_placement:-bl} \
                "${caption_text}" \
                caption-${index}.png

            caption_from="$(toml $toml caption.from $index)"
            caption_to="$(toml $toml caption.to $index)"

            position="(main_w-overlay_w):(main_h-overlay_h)"
            timing="${caption_from:-0},${caption_to:-1000}"
            overlay="overlay=${position}:enable='between(t,${timing})'"

            if [ $index = 1 ]; then
                filter="${filter} [a][1:v] ${overlay} [o1];"
                filter="${filter} [o1] palettegen=${max_cols}:${mode} [p];"
                filter="${filter} [b][$index:v] ${overlay} [v$index];"
            else
                filter="${filter} [v$((index-1))][$index:v] ${overlay} [v$index];"
            fi
            ffmpeg_args="${ffmpeg_args} -i caption-${index}.png"
        done
        filter="${filter} [v$index][p] paletteuse=${dither}:${diff_mode}"
    else
        filter="${filter} [a] palettegen=${max_cols}:${mode} [p];"
        filter="${filter} [b][p] paletteuse=${dither}:${diff_mode}"
    fi

    ffmpeg \
        -loglevel warning \
        -y \
        -ss "$start" \
        -t "$duration" \
        -i "$video" \
        ${ffmpeg_args} \
        -f gif \
        -filter_complex "$filter" \
        "${TEMP}/output.gif"

    losses=0
    gifsicle \
        -O3 \
        --no-extensions \
        -o "${TEMP}/gifsicle.${losses}.gif" \
        "$TEMP/output.gif"

    output_max_size="$(toml $toml output.max_size)"
    if [ -n "$output_max_size" ]; then
        size="$(stat -f '%z' "${TEMP}/gifsicle.${losses}.gif")"
        until [ "$size" -lt "$output_max_size" ]; do
            let "losses = losses + 5"

            gifsicle \
                -O3 \
                --lossy=$losses \
                --no-extensions \
                -o "${TEMP}/gifsicle.${losses}.gif" \
                "$TEMP/output.gif"

            size="$(stat -f '%z' "${TEMP}/gifsicle.${losses}.gif")"
            echo "   loss=$losses max=$output_max_size size=$size"
        done
    fi

    mv "$TEMP/gifsicle.${losses}.gif" "$gif"
}

function join {
    local IFS="$1";
    shift;
    echo "$*" | tr -s ',' | sed -e 's/^,//' -e 's/,$//'
}

function cleanup {
    rm -rf "$TEMP"
}

TEMP="$(mktemp -d /tmp/make_gif.XXXXX)"
trap cleanup EXIT

main "$@"
