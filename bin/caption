#!/usr/bin/env python

import argparse
import sys

from PIL import Image, ImageDraw, ImageFont

MINIMUM_FONT_SIZE = 8


class FontTooSmall(Exception):
    pass


def main():
    parser = argparse.ArgumentParser(
        description='Create a caption image.'
    )
    parser.add_argument(
        '--margin',
        default=10,
        type=int,
    )
    parser.add_argument(
        '--font',
        default='morlrounded-regular.otf',
    )
    parser.add_argument(
        '--font-size',
        default=40,
        type=int,
    )
    parser.add_argument(
        '--colour',
        default='#ffffff',
    )
    parser.add_argument(
        '--stroke-colour',
        default='#000000',
    )
    parser.add_argument(
        '--stroke-width',
        default=2,
        type=int,
    )
    parser.add_argument(
        '--text-align',
        default='left',
    )
    parser.add_argument(
        'width',
        type=int,
    )
    parser.add_argument(
        'height',
        type=int,
    )
    parser.add_argument(
        'text',
    )
    parser.add_argument(
        'output',
    )
    parser.add_argument(
        '--placement',
        default='bl',
    )
    args = parser.parse_args()
    image_size = (args.width, args.height)

    # check the text fits
    font = ImageFont.truetype('fonts/%s' % args.font, args.font_size)
    text_size = font.getsize_multiline(
        args.text,
        stroke_width=args.stroke_width
    )
    while text_too_large(text_size, image_size, args.margin):
        args.font_size -= 2
        if args.font_size < MINIMUM_FONT_SIZE:
            raise FontTooSmall
        font = ImageFont.truetype('fonts/%s' % args.font, args.font_size)
        text_size = font.getsize_multiline(
            args.text,
            stroke_width=2
        )

    canvas = Image.new('RGBA', image_size, (0, 0, 0, 0))
    image = ImageDraw.Draw(canvas)

    top = args.margin
    bottom = image_size[1] - (text_size[1]+args.margin)
    left = args.margin
    right = image_size[0] - (text_size[0]+args.margin)
    vcentre = int((image_size[1] - text_size[1]) / 2)
    hcentre = int((image_size[0] - text_size[0]) / 2)

    # FIXME percentage placements?
    placement = list(image_size)

    if ',' in args.placement:
        x, y = args.placement.split(',')
        try:
            x = int(x)
            if x < 0:
                x = placement[0] + x
        except ValueError:
            pass
        try:
            y = int(y)
            if y < 0:
                y = placement[1] + y
        except ValueError:
            pass
        placement = [x, y]

    if 't' in args.placement:
        placement[1] = top
    if 'm' in args.placement:
        placement[1] = vcentre
    if 'b' in args.placement:
        placement[1] = bottom
    if 'l' in args.placement:
        placement[0] = left
    if 'c' in args.placement:
        placement[0] = hcentre
    if 'r' in args.placement:
        placement[0] = right

    image.text(
        placement,
        args.text,
        args.colour,
        font,
        stroke_fill=args.stroke_colour,
        stroke_width=args.stroke_width,
        align=args.text_align,
    )
    canvas.save(args.output)
    print('  " font_size=%s placement=%s %s' % (
        args.font_size,
        placement,
        args.text.replace("\n", "\\n")
    ))


def text_too_large(text, image, margin):
    if text[0] + (margin * 2) > image[0]:
        return True
    if text[1] + (margin * 2) > image[1]:
        return True
    return False


if __name__ == '__main__':
    main()
