#!/usr/bin/env bash -euo pipefail

yellow=$'\e'[33m
magenta=$'\e'[35m
bold=$'\e'[1m
reset=$'\e'[0m
cols=$(tput cols)

function main {
    local create="$1"
    local path="$(dirname $create)"

    # create the source/episode index files if necessary
    local source="${path%/*}"
    create_source "$source"

    if [ "$source" != "$path" ]; then
        create_episode "$path"
    fi

    gif="$(basename $create)"
    create_gif "$source" "$path" "$gif"
}

function create_gif {
    local source="$1"
    local path="$2"
    local gif="$3"
    local toml="source/$path/$gif.toml"
    local output="source/$path/$gif.gif"
    local template="source/$(dirname "$path")/new"
    local overwrite=1

    if [ -f "$toml" ]; then
        overwrite=0
        read -p \
            "$(printf "$bold$magenta*** $toml exists; overwrite? (y/n) $reset")" \
            -n1 overwrite
        echo ''
        [ "$overwrite" = 'y' -o "$overwrite" = Y ] && overwrite=1
    fi

    if [ $overwrite = 1 ]; then
        FILE="$path"
        TITLE="$(echo "$gif" | sed -e 's/-/ /g')"
        PUBLISHED_AM="published = 2100-01-01T07:00:00Z"
        PUBLISHED_PM="published = 2100-01-01T15:00:00Z"
        KEYS="show_fkey = '$source/index'"$'\n'
        KEYS+="episode_fkey = '$path/index'"

        [ "$source" = "$path" ] \
            && KEYS="source_fkey = '$source/index'"

        [ ! -f $template ] \
            && template=source/new

        export FILE KEYS PUBLISHED_AM PUBLISHED_PM TITLE
        envsubst < $template > $toml

        subl -w $toml
    fi

    ./script/get_videos $toml

    dimensions=$(
        ffprobe \
            -loglevel error \
            -show_entries stream=width,height \
            -of csv=p=0:s=x \
            videos/$(bin/toml $toml video.file).$(bin/toml $toml video.ext) \
                | head -1
    )
    sed \
        -i '' \
        -e "s/REPLACE_SIZE/$(echo $dimensions | sed -e 's/x/:/')/" \
            $toml

    subl $toml

    # run this in the background, until we exit
    ( echo $toml | entr -np sh -c 'echo ""; make' ) &
    make

    while true; do
        read -s -N1 key
        case $key in
            g)      printf "$yellow  > Send to GIFwrapped$reset\n"
                    (
                        make gifwrapped
                        printf "$yellow>   Done$reset\n"
                    ) &
                    ;;
            i)      printf "$yellow  * Send infodump to Sublime$reset\n"
                    gifsicle --info --color-info --size-info $output | subl -n -
                    ;;
            l)      printf "$yellow%$((cols-1))s$reset\n" '' | tr ' ' -
                    ;;
            $'\f')  clear
                    ;;
            p)      printf "$yellow  + Preview$reset\n"
                    open -a Preview $output
                    ;;
            s)      printf "$yellow  + Safari$reset\n"
                    open -a Safari $output
                    ;;
            ' ')    printf "$yellow  * Rebuild$reset"
                    sed -i '' -e 's/XYZZZYX/XYZZZYX/' $toml
                    ;;
            $'\n')  echo ''
                    ;;
            \?)     echo ''
                    echo 'Hit: [ ]:Rebuild [G]ifwrapped [I]nfo [L]ine [P]review [Q]uit [S]afari'
                    ;;
            q)      break
                    ;;
        esac
    done

    echo ""

    # perform checks
    if grep 'WRITE ME' $toml >/dev/null; then
        printf "$bold$magenta  ! Description not written.$reset\n"
    fi
    if [ $(./bin/toml $toml --length tag) -lt 1 ]; then
        printf "$bold$magenta  ! No tags applied.$reset\n"
    fi
    if ./bin/toml $toml tag | grep 'tag1' >/dev/null; then
        printf "$bold$magenta  ! Contains default tags.$reset\n"
    fi
    case "$(./bin/toml $toml output.loss)" in
        0|''|no)    printf "$bold$magenta  ? No loss specified.$reset "
                    echo "GIF could be made smaller."
                    ;;
        *)          ;;
    esac

    # exit, taking the backgrounded entr with us
    kill -2 0
}

function create_source {
    local source="$1"

    mkdir -p "source/$source"
    if [ ! -f "source/$source/index.markdown" ]; then
        cat <<EOF > "source/$source/index.markdown"
\`\`\`
title = '$source'
year = '0000'
type = 'act agency event game internet movie recording-artist tv-show youtube'
source = true
imdb = 'tt0000000'
wikipedia = '__'

# homepage = 'https://www.guerrilla-games.com/play/horizon'
# playlist = 'PL--PgETgAz5FGoatB9KQzbnpv0bgZqU2l'
# url = 'https://vole.wtf/buttystock/'
# video = 'HU2ftCitvyQ'
\`\`\`

Write something here. If you want to.
EOF
        subl "source/$source/index.markdown"
    fi
}

function create_episode {
    local episode="$1"
    local source="${episode%/*}"

    mkdir -p "source/$episode"
    if [ ! -f "source/$episode/index.markdown" ]; then
        cat <<EOF > "source/$episode/index.markdown"
\`\`\`
title = 'TITLE'
type = 'tv-episode'
show_fkey = '$source/index'
season = 1
episode = 1
# imdb = 'tt0000000'
# wikipedia = '__'

type = 'music-video'
artist_fkey = '$source/index'
video = '5Dho47jZS9U'
source = true
\`\`\`

Write something here. If you want to.
EOF
        subl "source/$episode/index.markdown"
    fi
}

main "$1"
