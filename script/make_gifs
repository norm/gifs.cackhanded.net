#!/bin/bash

set -eu

DEFAULT_WIDTH=480
DEFAULT_FPS=10

PATH="./bin:$PATH"
TEMP="$(mktemp -d /tmp/make_gif.XXXXX)"


declare -a files
files=( $(find source -name [a-z]*.toml) )

for toml in "${files[@]}"; do
    slug="${toml%.*}"

    file=$(toml $toml video.file)
    ext=$(toml $toml video.ext)
    gif="${slug}.gif"
    video="videos/${file}.${ext}"

    if [ ! -f "$video" ]; then
        echo "** $toml:"
        echo "   $video does not exist"
        exit 1
    fi

    if [ ! -f "$gif" ]; then
        start=$(toml $toml video.start)
        duration=$(toml $toml video.duration)

        echo "++ $gif"

        # resize the image, preserving the aspect ratio
        output_width="$(toml $toml output.width)"
        scale="scale=${output_width:-$DEFAULT_WIDTH}:-1"

        # reduce the framerate
        output_fps="$(toml $toml output.fps)"
        fps="fps=${output_fps:-$DEFAULT_FPS}"

        # reduce no. of colours in the uniform palette
        output_colours="$(toml $toml output.colours)"
        max_cols="max_colors=${output_colours:-64}"

        # dithering to improve output
        output_mode="$(toml $toml output.mode)"
        mode="stats_mode=${output_mode:-diff}"
        dither="dither=bayer:bayer_scale=4"
        diff_mode="diff_mode=rectangle"

        # FIXME actual size
        # captions
        caption_text="$(toml $toml caption.text)"
        if [ -n "$caption_text" ]; then
            caption_font="$(toml $toml caption.font)"

            caption \
                480 \
                200 \
                --font "${caption_font:-morlrounded-regular.otf}" \
                "${caption_text}" \
                caption.png

            overlay="overlay=(main_w-overlay_w):(main_h-overlay_h)"

            filter="[0:v] ${fps},${scale},split [a][b];"
            filter="${filter} [a][1:v] ${overlay} [o];"
            filter="${filter} [o] palettegen=${max_cols}:${mode} [p];"
            filter="${filter} [b][1:v] ${overlay} [v];"
            filter="${filter} [v][p] paletteuse=${dither}:${diff_mode}"
            ffmpeg_args="-i caption.png"
        else
            filter="[0:v] ${fps},${scale},split [a][b];"
            filter="${filter} [a] palettegen=${max_cols}:${mode} [p];"
            filter="${filter} [b][p] paletteuse=${dither}:${diff_mode}"
            ffmpeg_args=""
        fi

        ffmpeg \
            -loglevel warning \
            -y \
            -ss "$start" \
            -t "$duration" \
            -i "$video" \
            ${ffmpeg_args} \
            -f gif \
            -filter_complex "$filter" \
            "${TEMP}/output.gif"

        losses=0
        gifsicle \
            -O3 \
            --no-extensions \
            -o "${TEMP}/gifsicle.${losses}.gif" \
            "$TEMP/output.gif"

        output_max_size="$(toml $toml output.max_size)"
        if [ -n "$output_max_size" ]; then
            size="$(stat -f '%z' "${TEMP}/gifsicle.${losses}.gif")"
            until [ "$size" -lt "$output_max_size" ]; do
                let "losses = losses + 5"

                gifsicle \
                    -O3 \
                    --lossy=$losses \
                    --no-extensions \
                    -o "${TEMP}/gifsicle.${losses}.gif" \
                    "$TEMP/output.gif"

                size="$(stat -f '%z' "${TEMP}/gifsicle.${losses}.gif")"
                echo "   loss=$losses max=$output_max_size size=$size"
            done
        fi

        mv "$TEMP/gifsicle.${losses}.gif" "$gif"
    fi
done
