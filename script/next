#!/usr/bin/env bash -oeu pipefail

function main {
    case "${1:-}" in
        -h|help)    usage ;;
        [0-9]*)     list_scheduled_gifs "$@" ;;
        filling)    list_unscheduled_gifs filling ;;
        '')         list_unscheduled_gifs next ;;
        *)          list_scheduled_gifs 30 "$@" ;;
    esac
}

function usage {
    sed -e 's/^        //' <<"    EOF"
        Usage:

            next
                    show the next day with no scheduled GIF, and a
                    breakdown of any unscheduled GIFs
            next filling
                    show the next day with no scheduled GIF, and the first
                    day that would have no scheduled GIF if all currently
                    unscheduled GIFs were used to fill in the gaps
            next count
                    show only the count of unscheduled GIFs
            next <count>
                    show the schedule for the next <count> days
            next [<count>] [<day> ...] [am|pm] [highlight] [empty|full]
                -   show the schedule for the next <count> <day(s)>
                    (eg. 'next 90 sat sun' will list weekends for 3 months);
                -   <count> defaults to 30
                -   <day> default to all days
                -   'am' will show only the morning GIFs,
                    'pm' will show only the afternoon GIFs; defaults to both
                -   'highlight' will highlight the start of the week in colour
                -   'empty' will only list empty days
                -   'full' will only list full days
    EOF
    exit 1
}
function list_scheduled_gifs {
    local count="$1"
    local days=''
    local empty=''
    local full=''
    local highlight=0
    local next=0
    local unscheduled_day=0
    local filling=0
    local time='both'
    local unscheduled_count=$(rg -l 2100 source | wc -l)
    local next_shown=0

    shift
    while [ "${1:-}" ]; do
        case "${1:-}" in
            empty)  empty=empty full=''  ;;
            full)   full=full   empty='' ;;
            high*)  highlight=1 ;;
            next)   next=1 empty=empty full='' ;;
            filling) filling=1 next=1 empty=empty full='' ;;
            am)     time='am' ;;
            pm)     time='pm' ;;
            *)      [ -n "$days" ] && days="$days|$1" || days="$1"
        esac
        shift
    done

    for day in $(seq 0 ${count}); do
        datestamp=$(gdate +'%Y-%m-%d' --date="now $day days")
        day_of_week=$(gdate +%a --date $datestamp)

        [ -n "$days" ] \
            && echo "$day_of_week" | egrep -iqv "$days" \
            && continue

        pattern="published.*$datestamp"
        [ $time = 'am' ] && pattern="${pattern}T07"
        [ $time = 'pm' ] && pattern="${pattern}T15"

        content=$(
            ( rg "$pattern" source || echo '' ) \
                | cut -d: -f1 \
                | sed -e 's#source/##' \
                      -e 's/.toml//' \
                      -e '2,$s/^/               /'
        )

        [ -n "$content" -a -n "$empty" ] && continue

        [ $highlight = 1 -a "$day_of_week" = "Mon" ] && printf '\e[34m'

        if [ -z "$content" ]; then
            [ -n "$full" ] && continue
            printf '\e[1m\e[35m'

            if [ $next_shown = 0 ]; then
                [ $next = 1 ] && content="-- next unscheduled day ($day days)"
                unscheduled_day=1
                next_shown=1
            fi

            if [ $filling = 1 ]; then
                if [ $unscheduled_count = 0 ]; then
                    content="-- next unscheduled day ($day days), if using unscheduled"
                    filling=0
                fi
                unscheduled_count=$((unscheduled_count-1))
            fi
        fi

        if [ $filling = 1 ]; then
            [ -n "$content" ] && \
                printf '%s %s %s\e[0m\n' $datestamp $day_of_week "$content"
        else
            printf '%s %s %s\e[0m\n' $datestamp $day_of_week "$content"
        fi

        [ $next = 1 -a $filling = 0 ] && break
    done

    if [ $unscheduled_day = 1 -a $next = 0 ]; then
        echo ''
        count_unscheduled
    fi
}

function count_unscheduled {
    unscheduled=$(rg -l 2100 source | wc -l)
    [ -n "$unscheduled" ] && \
        printf '\e[1m\e[32mThere are %d unscheduled GIFs.\e[0m\n' $unscheduled
}

function list_unscheduled_gifs {
    list_scheduled_gifs 1000 "$1" am

    echo ''
    rg -l 2100 source \
        | sed -e 's/^source.//' -e 's#/[^/]*$##' \
        | sort \
        | uniq -c \
        | sort -n

    echo ''
    count_unscheduled
}

main "$@"
